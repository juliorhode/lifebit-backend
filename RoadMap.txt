Roadmap de Desarrollo para "LifeBit" (v1.0)
*********************************************

Epopeya 0: Fundación del Proyecto y Arquitectura Core (CORE)
*************************************************************

[x] CORE-01: Crear estructura de carpetas profesional del proyecto backend.

[x] CORE-02: Inicializar Git y crear repositorio privado en GitHub.

[x] CORE-03: Inicializar proyecto Node.js con npm e instalar dependencias básicas (express, pg).

[x] CORE-04: Configurar nodemon y scripts start/dev en package.json.

[x] CORE-05: Implementar manejo de variables de entorno seguras con dotenv.

[x] CORE-06: Establecer la conexión a la base de datos PostgreSQL.

[x] CORE-07: Implementar un sistema de logging de peticiones (middleware).

[x] CORE-08: Implementar un manejador de errores global centralizado.


Epopeya 1: Autenticación y Gestión de Usuarios (AUTH)
*************************************************************

[ ] AUTH-01: Diseñar e implementar el modelo de datos para usuarios y membresias (Refactor V1).

[ ] AUTH-02: Configurar Passport.js como estrategia general de autenticación.

[ ] AUTH-03: Implementar el flujo de registro/login tradicional (Email/Contraseña) con hashing de contraseñas (bcrypt).

[ ] AUTH-04: Implementar el flujo de login social con Google (OAuth 2.0).

[ ] AUTH-05: Implementar la generación de JSON Web Tokens (JWT) al iniciar sesión.

[ ] AUTH-06: Implementar el sistema de Refresh Tokens para sesiones persistentes y seguras.

[ ] AUTH-07: Crear un middleware de "protección de rutas" que verifique el JWT.

[ ] AUTH-08: Crear un middleware de "autorización por roles" (RBAC - Role-Based Access Control) para distinguir entre Dueño, Administrador y Residente.

[ ] AUTH-09: Implementar el flujo de "finalizar registro" con token de invitación por email.


Epopeya 2: Panel de Dueños de la Aplicación (DUEÑO)
*************************************************************

[x] DUEÑO-01: [Módulo Edificios] - Implementar CRUD completo y filtrado para la entidad edificios.

[ ] DUEÑO-02: [Módulo Contratos/Licencias] - Implementar CRUD para gestionar las licencias de los edificios (planes Básico, Profesional, etc.).

[ ] DUEÑO-03: [Módulo Pagos de Servicio] - Implementar endpoints para que los administradores reporten el pago del servicio y para que los Dueños los validen.

[ ] DUEÑO-04: [Módulo Noticias Globales] - Implementar CRUD para que los Dueños creen noticias y las dirijan a todos los edificios, a un grupo o a uno específico.

[ ] DUEÑO-05: [Módulo Encuestas Globales] - Implementar CRUD para la creación de encuestas y votaciones dirigidas.

[ ] DUEÑO-06: [Dashboard Financiero] - Crear endpoints de agregación para generar los datos de las gráficas (ingresos vs. egresos, edificios por zona/plan).

[ ] DUEÑO-07: [Módulo Soporte (Tickets)] - Implementar sistema para que los administradores creen tickets y los Dueños puedan verlos y gestionarlos.

[ ] DUEÑO-08: [Módulo Soporte (SQL Runner)] - Crear un endpoint seguro (solo para Dueños) que pueda ejecutar consultas SQL de solo lectura (SELECT) en la base de datos.

[ ] DUEÑO-09: [Módulo CMS Landing Page] - Crear endpoints CRUD para gestionar el contenido de las diferentes secciones de la página principal.

[ ] DUEÑO-10: [Módulo Auditoría] - Implementar la visualización del log de auditoría y la funcionalidad para revertir cambios (basado en los datos guardados en el campo JSONB). 


Epopeya 3: Panel de Administradores de Condominio (ADMIN)
*************************************************************

[ ] ADMIN-01: [Módulo Registro de Residentes] - Implementar endpoint para registro manual de un residente.

[ ] ADMIN-02: [Módulo Registro de Residentes (Masivo)] - Implementar endpoint para la subida de archivos (CSV, Excel) y su posterior parseo y registro en lote.

[ ] ADMIN-03: [Módulo Recursos] - Implementar CRUD para gestionar los recursos del edificio (salones de fiesta, piscinas, puestos de estacionamiento).

[ ] ADMIN-04: [Módulo Recibos de Condominio] - Crear endpoints para la carga de gastos mensuales y la generación automática de los recibos para cada unidad.

[ ] ADMIN-05: [Módulo Pagos de Residentes] - Implementar endpoints para que los residentes reporten sus pagos de condominio/reservas.

[ ] ADMIN-06: [Módulo Conciliación Bancaria] - Implementar endpoint para la subida de estados de cuenta y el servicio de conciliación automática.

[ ] ADMIN-07: [Módulo Discusiones (Foro)] - Implementar CRUD completo para hilos y comentarios, incluyendo la capacidad del admin de moderar.

[ ] ADMIN-08: [Módulo Elecciones] - Crear endpoints para gestionar el ciclo de elecciones: apertura de candidaturas, cierre, gestión de candidatos y visualización de resultados.

[ ] ADMIN-09: [Motor de Reglas] - Diseñar e implementar el CRUD para las reglas (guardadas como JSONB) y el motor de evaluación de las mismas.


Epopeya 4: Panel de Residentes (RESIDENTE)
*************************************************************

[ ] RESIDENTE-01: [Dashboard] - Crear endpoints que agreguen y resuman la información relevante para un residente específico (sus pagos, sus reservas, notificaciones, etc.).

[ ] RESIDENTE-02: [Módulo Pagos] - Utilizar el endpoint de ADMIN-05 para reportar pagos.

[ ] RESIDENTE-03: [Módulo Reservas] - Implementar CRUD para que los residentes puedan solicitar, ver y cancelar reservas de áreas comunes.

[ ] RESIDENTE-04: [Módulo Votaciones y Encuestas] - Crear endpoints para que los residentes puedan emitir su voto/respuesta en las encuestas y votaciones activas.

[ ] RESIDENTE-05: [Módulo Discusiones] - Utilizar los endpoints de ADMIN-07 para participar en el foro.

[ ] RESIDENTE-06: [Módulo Elecciones] - Utilizar los endpoints de ADMIN-08 para postularse como candidato y para votar en las elecciones.

