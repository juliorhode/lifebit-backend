# Roadmap Maestro del Backend de LifeBit (v2.0 - Documento Vivo)

# =================================================================================
# ||                                    ESTADO                                   ||
# =================================================================================
# || Leyenda:                                                                    ||
# || [x] Tarea Completada                                                        ||
# || [~] Tarea en Progreso o Parcialmente Completada                             ||
# || [ ] Tarea Pendiente                                                         ||
# =================================================================================

# =================================================================================
# ||     Epopeya 0: Fundación del Proyecto (CORE)     `[COMPLETADA]`             ||
# =================================================================================
# || Objetivo: Establecer una base de código robusta, segura y escalable.        ||
# ---------------------------------------------------------------------------------
*   `[x]` **CORE-01:** Estructura de carpetas profesional y modular.
*   `[x]` **CORE-02:** Conexión a la base de datos PostgreSQL (con pool).
*   `[x]` **CORE-03:** Servidor Express y middlewares base (`morgan`, `express.json`).
*   `[x]` **CORE-04:** Manejo de variables de entorno (`dotenv`).
*   `[x]` **CORE-05:** Manejador de errores global centralizado (`errorHandler`).
*   `[x]` **CORE-06:** Scripts de inicialización de BD (`init.js`, `setup.js`).

# =================================================================================
# ||     Epopeya 1: Autenticación y Ciclo de Vida del Usuario     `[EN PROGRESO]`  ||
# =================================================================================
# || Objetivo: Construir todos los mecanismos para que los usuarios puedan       ||
# ||           entrar, salir, gestionar sus cuentas e invitar a otros.           ||
# ---------------------------------------------------------------------------------
*   `[x]` **AUTH-01:** Modelo de datos MVP (`rol` y `id_*_actual` en `usuarios` - ADR-001).
*   `[x]` **AUTH-02:** Login tradicional (`POST /api/auth/login`).
*   `[x]` **AUTH-03:** Generación de JWT (`accessToken` y `refreshToken`).
*   `[x]` **AUTH-04:** Middlewares de seguridad (`protegeRuta` y `verificaRol`).
*   `[x]` **AUTH-05:** Servicio de envío de emails transaccionales (`Resend`).
*   `[x]` **AUTH-06:** Flujo de invitación con token y expiración.
*   `[x]` **AUTH-07:** Flujo de finalización de registro (`POST /api/auth/finalizar-registro`).
*   `[~]` **AUTH-08:** Flujo de invitación de Residentes por el Administrador.
    *   `[x]` Endpoint para invitación individual.
    *   `[x]` Endpoint para invitación masiva por archivo.
    *   `[x]` Worker que encola los trabajos de envio de email masivo.
*   `[x]` **AUTH-09:** CRUD completo de Residentes (Listar, Ver, Activar/Suspender).
*   `[x]` **AUTH-10:** Recuperación de contraseña (`forgot-password` y `reset-password`).
*   `[x]` **AUTH-11:** Cambio de contraseña para un usuario logueado.
*   `[x]` **AUTH-12 (Pospuesto):** Integración con Google (OAuth 2.0).
* Epopeya AUTH-B: Gestión de Perfil de Usuario
*    [ ] PERFIL-01: Endpoint GET /api/perfil/me para obtener los datos completos del usuario logueado.
*    [ ] PERFIL-02: Endpoint PATCH /api/perfil/me para actualizar datos personales (nombre, teléfono).
*    [ ] PERFIL-03: Flujo para vincular una cuenta de Google a una cuenta activa.
*    [ ] PERFIL-04: Flujo para desvincular una cuenta de Google.

# =================================================================================
# ||     Epopeya 2: Panel del Dueño (Gestión del SaaS)     `[EN PROGRESO]`         ||
# =================================================================================
# || Objetivo: Dar al Dueño las herramientas para gestionar el negocio.          ||
# ---------------------------------------------------------------------------------
*   `[x]` **OWNER-01:** Flujo de Onboarding de Clientes (Recibir, Listar y Aprobar Solicitudes).
*   `[~]` **OWNER-02:** Gestión de Edificios (Creación implementada, pendiente Leer/Actualizar/Borrar).
*   `[ ]` **OWNER-03:** CRUD completo para Licencias (`/api/dueño/licencias`).
*   `[ ]` **OWNER-04:** Dashboard del Dueño (Endpoints de agregación para métricas).
*   `[ ]` **OWNER-05:** Módulo de Noticias Globales.
*   `[ ]` **OWNER-06:** Herramienta de Soporte Nivel 2 (SQL Runner).

# =================================================================================
# ||     Epopeya 3: Panel del Administrador (Configuración)     `[COMPLETADA]`   ||
# =================================================================================
# || Objetivo: Dar al Admin las herramientas para modelar su condominio.         ||
# ---------------------------------------------------------------------------------
*   `[x]` **ADMIN-00:** Crear el mecanismo de estados que obliga al administrador a configurar su edificio en un orden lógico.
*   `[x]` **ADMIN-01:** Gestión de Unidades Habitacionales (Generador Flexible Masivo).
*   `[x]` **ADMIN-02:** Gestión de Tipos de Recurso (CRUD completo).
*   `[x]` **ADMIN-03:** Gestión de Inventario de Recursos (Generador Secuencial y Carga por Archivo).
*   `[x]` **ADMIN-04:** Asignación de Recursos (API Masiva para vincularlos a Unidades).
*   `[x]` **ADMIN-05:** Endpoints de lectura para la configuración (Listar Unidades y Recursos).

# =================================================================================
# ||     Epopeya 4: El Núcleo Financiero (Admin y Residente)     `[PENDIENTE]`     ||
# =================================================================================
# || Objetivo: Construir el motor que gestiona las finanzas del condominio.      ||
# ---------------------------------------------------------------------------------
*   `[ ]` **FIN-01:** Gestión de Cuentas Bancarias del Condominio (CRUD del Admin).
*   `[ ]` **FIN-02:** Gestión de Gastos (CRUD del Admin).
*   `[ ]` **FIN-03:** Generación de Recibos de Condominio (El "Cerebro" del Sistema).
*   `[ ]` **FIN-04:** Flujo de Pagos del Residente (Ver Deudas y Reportar Pagos).
*   `[ ]` **FIN-05:** Conciliación de Pagos (Herramienta del Admin).
*   `[ ]` **FIN-06:** Gestión de Multas (CRUD del Admin).
*   `[ ]` **FIN-07:** Módulo Contable de Partida Doble (`plan_de_cuentas`, `asientos`, `movimientos`).

# =================================================================================
# ||     Epopeya 5: Comunidad y Participación     `[PENDIENTE]`                   ||
# =================================================================================
# || Objetivo: Construir las herramientas de interacción comunitaria.            ||
# ---------------------------------------------------------------------------------
*   `[ ]` **COM-01:** Módulo de Noticias y Anuncios del Condominio.
*   `[ ]` **COM-02:** Foro de Discusiones (Hilos y Respuestas).
*   `[ ]` **COM-03:** Módulo Unificado de Consultas (Encuestas, Votaciones y Elecciones).
*   `[ ]` **COM-04:** Gestión de Áreas Comunes (CRUD del Admin).
*   `[ ]` **COM-05:** Módulo de Reservas de Áreas Comunes (Flujo del Residente).

# =================================================================================
# ||     Epopeya 6: Soporte y Automatización     `[PENDIENTE]`                   ||
# =================================================================================
# || Objetivo: Implementar herramientas de soporte y el motor de automatización. ||
# ---------------------------------------------------------------------------------
*   `[ ]` **SUPPORT-01:** Sistema de Incidencias Jerárquico (Residente -> Admin -> Dueño).
*   `[ ]` **SUPPORT-02:** Gestión de Cartas y Documentos (Solicitud y Emisión).
*   `[ ]` **AUTO-01:** Motor de Reglas (CRUD y `RuleEngineService`).
*   `[ ]` **AUTO-02:** Módulo de Auditoría (`AuditService` y registro de acciones).



# =================================================================================
# ||     Epopeya 9 (Futura): Mantenimiento y Escalabilidad     `[PENDIENTE]`     ||
# =================================================================================
# || Objetivo: Realizar mejoras técnicas y preparar la aplicación para el crecimiento. ||
# ---------------------------------------------------------------------------------
*   `[ ]` **MAINT-01 (Refactor): Migrar el Servicio de Email a Amazon SES.**
    *   `[ ]` Obtener y configurar credenciales de AWS SES.
    *   `[ ]` Refactorizar 'emailService.js' para usar el SDK de AWS.
    *   `[ ]` Adaptar la construcción del 'payload' al formato requerido por SES.
    *   `[ ]` Actualizar las variables de entorno en producción.
*   `[ ]` **MAINT-02 (Refactor): Implementar el modelo de 'afiliaciones' (ADR-001).**






ADR-007: Introducción de Placeholders de Contador Global
Título: ADR-007: Introducción de Placeholders de Contador Global para el Generador de Unidades
Fecha: 2025-08-18
Estado: Propuesto
Contexto:
El motor de generación de unidades actual (POST /api/admin/unidades/generar-flexible) utiliza placeholders que se resetean en cada "nivel principal" (definido por totalPisos). Por ejemplo, {u} se reinicia a 1 en cada nuevo piso. Durante las pruebas de UX en el frontend, se identificó un caso de uso crítico que el sistema actual no soporta: propiedades (como conjuntos de casas o galpones) donde la numeración de las unidades es consecutiva a lo largo de toda la propiedad, sin reiniciarse en cada "calle" o "manzana".
Problema:
La interfaz de usuario del frontend está limitada por la capacidad del backend. Para ofrecer una solución verdaderamente flexible, el motor de generación del backend necesita ser capaz de manejar contadores que no se reseteen, sino que se incrementen globalmente a través de todos los niveles.
Decisión:
Se ha decidido extender la funcionalidad del motor de generación del backend para que soporte un nuevo conjunto de placeholders de "contador global".
Nuevos Placeholders a Implementar en el Backend:
{c}: Contador global numérico simple (ej: 1, 2, ..., 30).
{C}: Contador global numérico con 2 dígitos (ej: 01, 02, ..., 30).
{L_c}: Contador global alfabético (ej: A, B, ..., AD).
Lógica de Implementación Propuesta (Backend):
El servicio del generador en el backend deberá mantener una variable de contador acumulativo. Este contador se inicializará en 1 antes de que comiencen los bucles de "piso" y se incrementará en 1 por cada unidad generada, independientemente del piso en el que se encuentre. Los nuevos placeholders se reemplazarán usando el valor de este contador global.
Consecuencias:
Backend: Se requiere una modificación en el servicio de generación de unidades para implementar la lógica del nuevo contador y los nuevos reemplazos de placeholders.
Frontend: El desarrollo de la interfaz de usuario para los bloques de "Contador Global" queda bloqueado hasta que el backend implemente esta funcionalidad. Podemos construir la UI de forma aislada, pero la integración final dependerá de este cambio en la API.
Beneficios: Esta mejora transformará el generador de una herramienta específica para edificios a una herramienta de generación de secuencias genérica y mucho más potente, ampliando significativamente los tipos de propiedades que LifeBit puede gestionar "listo para usar".